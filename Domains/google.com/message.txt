import java.util.concurrent.*;

public class Checking {
    public static void main(String[] args) throws InterruptedException {
//        ExecutorService ex = Executors.newFixedThreadPool(3);
//        Callable<Integer> c1 = () -> {
//            return 5 * 2;
//        };
//        Future<Integer> getC1 = ex.submit(c1);
//        Callable<Integer> c2 = () -> {
//            return 5*4;
//        };
//        Future<Integer> getC2 = ex.submit(c2);
//        int return1 = 0;
//        int return2 = 0;
//        try {
//            return1 = getC1.get();
//            return2 = getC2.get();
//        }
//        catch (InterruptedException | ExecutionException ee)
//        {
//
//        }
//        ex.shutdown();
//        System.out.println(return1);
//        System.out.println(return2);
//        System.out.println();



//        ExecutorService threadPool = Executors.newFixedThreadPool(3);
//        Runnable r1 = ()->{
//            System.out.println("I'm first");
//        };
//        Runnable r2 = ()->{
//            try
//            {
//                Thread.sleep(50);
//            }
//            catch (InterruptedException e)
//            {
//
//            }
//            System.out.println("I'm second");
//        };
//        threadPool.execute(r1);
//        threadPool.execute(r2);
//        threadPool.shutdown();

//        Thread t1 = new Thread(()->{
//            System.out.println("Hello world I'm first ");
//        });
//        //t1.setPriority(10);
//        Thread t2 = new Thread(()->{
//            System.out.println("Hello world I'm second - mabey");
//        });
//        //t2.setPriority(1);
//        Thread t3 = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                System.out.println("Hello world i'm third ? ");
//            }
//        });
//        t1.start();
//        t2.start();
//        t3.start();
//        try{
//            t1.join();
//            t2.join();
//            t3.join();
//        }
//        catch (InterruptedException e1)
//        {
//
//        }


        ExecutorService threadPool = Executors.newFixedThreadPool(5);
        Callable<String> task1 = new Callable<String>(){
            static int num = 0;
            public String call()
            {
                try
                {
                    Thread.sleep(2);
                }
                catch (InterruptedException e)
                {

                }
                return String.valueOf(num++);
            }
        };
        Future<String> arr[] = new Future[5];
        for (int i = 0; i < 5; i++) {
            arr[i] = threadPool.submit(task1);
        }
        System.out.println("finish : ");
        for (int i = 0; i < 5; i++) {
            if (arr[i].isDone())
            {
                System.out.print(i+",");
            }
            if (i==2)
            {
                Thread.sleep(50);
            }
        }
        String arr2[] = new String[5];
        for (int i = 0; i < 5; i++) {
            try {

                arr2[i] = arr[i].get();
            }
            catch(InterruptedException | ExecutionException e)
            {

            }
        }
        threadPool.shutdown();
    }
}